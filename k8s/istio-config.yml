apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: nl2sparql-istio-config
spec:
  profile: default
  components:
    egressGateways:
    - name: istio-egressgateway
      enabled: true
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
    pilot:
      enabled: true
  values:
    global:
      proxy:
        autoInject: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      useMCP: true
    pilot:
      autoscaleEnabled: true
      autoscaleMin: 1
      autoscaleMax: 5
      resources:
        requests:
          cpu: 500m
          memory: 2048Mi
    gateways:
      istio-ingressgateway:
        autoscaleEnabled: true
        autoscaleMin: 1
        autoscaleMax: 5
    telemetry:
      enabled: true
      v2:
        enabled: true
        prometheus:
          enabled: true
        stackdriver:
          enabled: false
    sidecarInjectorWebhook:
      rewriteAppHTTPProbe: true

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: nl2sparql-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
      privateKey: /etc/istio/ingressgateway-certs/tls.key
    hosts:
    - "*"

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nl2sparql-vs
spec:
  hosts:
  - "*"
  gateways:
  - nl2sparql-gateway
  http:
  - match:
    - uri:
        prefix: /api
    route:
    - destination:
        host: api-service
        port:
          number: 8000
  - match:
    - uri:
        prefix: /graphdb
    route:
    - destination:
        host: graphdb-service
        port:
          number: 7200
  - match:
    - uri:
        prefix: /ray
    route:
    - destination:
        host: ray-head-service
        port:
          number: 8265

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: api-destinationrule
spec:
  host: api-service
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 1024
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 10

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: nl2sparql-authz
spec:
  selector:
    matchLabels:
      app: nl2sparql
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/default/sa/api-service"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/*"]
  - from:
    - source:
        namespaces: ["monitoring"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics"]

---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: external-graphdb
spec:
  hosts:
  - graphdb-external.example.com
  ports:
  - number: 7200
    name: http
    protocol: HTTP
  resolution: DNS
  location: MESH_EXTERNAL

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: nl2sparql-filter
spec:
  workloadSelector:
    labels:
      app: nl2sparql
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.ratelimit
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
          domain: nl2sparql
          rate_limit_service:
            grpc_service:
              envoy_grpc:
                cluster_name: rate_limit_cluster
            transport_api_version: V3